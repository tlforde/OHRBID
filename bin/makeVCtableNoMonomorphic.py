#!/usr/bin/env python

#created by Matej Medvecky

#VC_table.dat must be tab-limited table generated by script makeVCtable.py

import sys
import re

def remove_monomorphic_snps():
    if len(sys.argv) != 2:
        print("USAGE: %s <VC_table.dat>" % sys.argv[0])
        return False

    with open(sys.argv[1], 'r') as snpFile, open('VC_table_noMonomorphic.dat', 'w') as outTableFile, open('monomorphic_sites.txt', 'w') as monoFile:
        headerPattern = re.compile(r'(^chromosome\tposition\tref allele\t.+)')
        headerData = headerPattern.findall(snpFile.readline())
        if not headerData:
            print("ERROR: Correct header is missing! Are you sure you input table generated by makeVCtable.py script?")
            return False
        snps = []
        for line in snpFile:
            snps.append(list(line.rstrip().split("\t")))
        if not snps:
            print("ERROR: Something went wrong, list of snps is empty! Are you sure you input table generated by makeVCtable.py script?")
            return False

        snpPattern = re.compile(r'^(.+?):.+')
        snpsToBeRemoved = []
        for snp in snps:
            snpData = snpPattern.findall(snp[3])
            if snpData:
                templateSnp = str(snpData[0])
            else:
                print("ERROR: Wrong snp format! Are you sure you input table generated by makeVCtable.py script?")
                return False
            for currSample in snp[3:]:
                isMonomorphic = True
                snpCurrData = snpPattern.findall(currSample)
                if snpData:
                    if templateSnp != str(snpCurrData[0]):
                        isMonomorphic = False
                        break
            if isMonomorphic:
                snpsToBeRemoved.append(snp)
                monoFile.write("%s\t%s\t%s\t%s\n" % (str(snp[0]), str(snp[1]), str(snp[2]), str(snpCurrData[0])))
        for snpToRem in snpsToBeRemoved:
            snps.remove(snpToRem)

        outTableFile.write("%s\n" % str(headerData[0]))
        for snp in snps:
            isFirst = True
            for entry in snp:
                if isFirst:
                    outTableFile.write("%s" % entry)
                    isFirst = False
                else:
                    outTableFile.write("\t%s" % entry)
            outTableFile.write("\n")

remove_monomorphic_snps()
